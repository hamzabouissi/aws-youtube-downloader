AWSTemplateFormatVersion : 2010-09-09
Parameters:
  VpcId:
    Type: String
  SubnetIds:
    Description: Subnet ids for rds (when you use the vpc template in this repo, then use the 3x TheVPCdataSubnets)
    Type: "List<AWS::EC2::Subnet::Id>"
  PublicSubnetIds:
    Description: Subnet ids for rds (when you use the vpc template in this repo, then use the 3x TheVPCdataSubnets)
    Type: "List<AWS::EC2::Subnet::Id>"
  MongoKeyName:
    Type: String
    Default: mongo
  
  ElasticKeyName:
    Type: String
    Default: elasticsearch
  
  BastionKeyName:
    Type: String
    Default: scraper
  
  LatestAmiId:
    Type: String
    Default: ami-05fa00d4c63e32376 #ami-0a0cf2b8bc4634fe1
  
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
      Policies:
        - PolicyName: allowLambdaLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - logs:*
              Resource: arn:aws:logs:*:*:*
        - PolicyName: allowSqs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - sqs:ReceiveMessage
              - sqs:SendMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:ChangeMessageVisibility
              Resource: "*"
        
        - PolicyName: GetFile
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:GetObjectAttributes
              - s3:HeadObject
              Resource: "arn:aws:s3:::youtubecrawlerfunction/*"


  FunctionSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: Security group for Lambda which will execute the 
      GroupName: "web_scraper_lambda_sg"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic by default
          IpProtocol: "-1"

      SecurityGroupIngress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId
  

  libs:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: lambda-packages
      Description: Dependencies for the crawler lambdas.
      Content:
        S3Bucket: lambdacrawlerbucketdeps
        S3Key: layer.zip
      CompatibleRuntimes:
        - python3.9


  CaptionGeneratorLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: youtubecrawlerfunction
        S3Key: generate_captions.zip
      Handler: generate_captions.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 100
      MemorySize: 512
      VpcConfig:
        SecurityGroupIds:
          - !Ref FunctionSecurityGroup
        SubnetIds: !Ref SubnetIds
      Layers:
        - !Ref libs
      


  MongoLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: youtubecrawlerfunction
        S3Key: save_mongo.zip
      Handler: save_mongo.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 100
      MemorySize: 512
      VpcConfig:
        SecurityGroupIds:
          - !Ref FunctionSecurityGroup
        SubnetIds: !Ref SubnetIds
      Layers:
        - !Ref libs
      Environment:
        Variables:
          MONGO_HOST: !GetAtt MongoInstance.PrivateIp

  ElasticLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: youtubecrawlerfunction
        S3Key: save_elasticsearch.zip
      Handler: save_elasticsearch.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 100
      MemorySize: 512
      VpcConfig:
        SecurityGroupIds:
          - !Ref FunctionSecurityGroup
        SubnetIds: !Ref SubnetIds
      Layers:
        - !Ref libs
      Environment:
        Variables:
          ELASTIC_URI: !GetAtt ElasticInstance.PrivateIp
  
  CaptionGeneratorLambdaFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt VideosQueue.Arn
      FunctionName: !GetAtt CaptionGeneratorLambdaFunction.Arn



  MongoLambdaFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt SubtitlesQueue.Arn
      FunctionName: !GetAtt MongoLambdaFunction.Arn

    
  ElasticLambdaFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt SubtitlesQueue.Arn
      FunctionName: !GetAtt ElasticLambdaFunction.Arn

  VideosQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: youtube_videos_ids
      DelaySeconds: 0
      VisibilityTimeout: 120
      RedrivePolicy: 
        deadLetterTargetArn: 
          Fn::GetAtt: 
            - "DeadLetterVideosQueue"
            - "Arn"
        maxReceiveCount: 5
  
  DeadLetterVideosQueue: 
    Type: AWS::SQS::Queue
  
  SubtitlesQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: youtube_subtitle_data
      DelaySeconds: 0
      VisibilityTimeout: 120
      RedrivePolicy: 
        deadLetterTargetArn: 
          Fn::GetAtt: 
            - "DeadLetterSubtitleQueue"
            - "Arn"
        maxReceiveCount: 5

  DeadLetterSubtitleQueue: 
    Type: AWS::SQS::Queue
  
  MongoInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      
      - IpProtocol: tcp
        FromPort: 27017
        ToPort: 27017
        CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId

  
  ElasticInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      
      - IpProtocol: tcp
        FromPort: 9200
        ToPort: 9200
        CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId

  KibanaInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      
      - IpProtocol: tcp
        FromPort: 5601
        ToPort: 5601
        CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId
  
  ScraperInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      
      - IpProtocol: tcp
        FromPort: 6800
        ToPort: 6800
        CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId

  
  BastionInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      VpcId: !Ref VpcId
    

  MongoInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3a.medium
      SecurityGroupIds: 
        - !GetAtt MongoInstanceSecurityGroup.GroupId

      KeyName: !Ref MongoKeyName
      ImageId: !Ref LatestAmiId
      SubnetId: !Select [0, !Ref SubnetIds ]
      UserData:
        Fn::Base64:
          |
          #!/bin/bash
          sudo cat <<EOT >> /etc/yum.repos.d/mongodb-org-6.0.repo
          [mongodb-org-6.0]
          name=MongoDB Repository
          baseurl=https://repo.mongodb.org/yum/amazon/2/mongodb-org/6.0/x86_64/
          gpgcheck=1
          enabled=1
          gpgkey=https://www.mongodb.org/static/pgp/server-6.0.asc
          EOT
          sudo yum update -y
          sudo yum install -y mongodb-org
          sudo systemctl enable mongod
          sudo systemctl start mongod


  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: elastic-instance-profile
      Path: /
      Roles: 
       - !Ref ElasticInstanceRole
  
  ElasticInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: elastic-instance-profile
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: allowS3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - s3:PutObject
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:GetObjectAttributes
              - s3:HeadObject
              Resource: "*"
        

  
  ElasticInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t3a.medium
      SecurityGroupIds: 
        - !GetAtt ElasticInstanceSecurityGroup.GroupId
      KeyName: !Ref 'ElasticKeyName'
      ImageId: !Ref 'LatestAmiId'
      SubnetId: !Select [0, !Ref SubnetIds ]
      IamInstanceProfile: !Ref InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          - #!/bin/bash
            echo "export ES_NETWORK_HOST=0.0.0.0" >> ~/.bashrc
            source ~/.bashrc

            sudo rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch
            sudo rm /etc/yum.repos.d/elasticsearch.repo
            sudo cat <<EOT >> /etc/yum.repos.d/elasticsearch.repo
            [elasticsearch]
            name=Elasticsearch repository for 8.x packages
            baseurl=https://artifacts.elastic.co/packages/8.x/yum
            gpgcheck=1
            gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch
            enabled=0
            autorefresh=1
            type=rpm-md
            EOT

            sudo yum install --enablerepo=elasticsearch elasticsearch
            sudo /bin/systemctl daemon-reload
            sudo /bin/systemctl enable elasticsearch.service
            sudo systemctl start elasticsearch.service
            sudo aws s3 cp /etc/elasticsearch/certs/http_ca.crt s3://youtubecrawlerfunction


  KibanaInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.medium
      SecurityGroupIds: 
        - !GetAtt KibanaInstanceSecurityGroup.GroupId
      KeyName: !Ref 'ElasticKeyName'
      ImageId: !Ref 'LatestAmiId'
      SubnetId: !Select [0, !Ref SubnetIds ]
      IamInstanceProfile: !Ref InstanceProfile
      # UserData:
      #   Fn::Base64: !Sub |
      #     #!/bin/bash
      #     echo "export elasticsearch.hosts=https://${ElasticInstance.PrivateIp}" >> ~/.bashrc
      #     source ~/.bashrc
          
      #     sudo rpm --import https://artifacts.elastic.co/GPG-KEY-elasticsearch
      #     sudo touch /etc/yum.repos.d/kibana.repo
      #     sudo cat <<EOT >> /etc/yum.repos.d/kibana.repo
      #     [kibana-8.x]
      #     name=Kibana repository for 8.x packages
      #     baseurl=https://artifacts.elastic.co/packages/8.x/yum
      #     gpgcheck=1
      #     gpgkey=https://artifacts.elastic.co/GPG-KEY-elasticsearch
      #     enabled=1
      #     autorefresh=1
      #     type=rpm-md
      #     EOT

      #     sudo yum install -y kibana
      #     sudo /bin/systemctl daemon-reload
      #     sudo /bin/systemctl enable kibana.service
      #     sudo systemctl start kibana.service

  


  BastionInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      SecurityGroupIds: 
        - !GetAtt BastionInstanceSecurityGroup.GroupId
        - Fn::ImportValue: 'pengguin-test-EnvironmentSecurityGroup'
      KeyName: !Ref 'BastionKeyName'
      ImageId: !Ref 'LatestAmiId'
      SubnetId: !Select [0, !Ref PublicSubnetIds ]
     

Outputs:
  ElasticPrivateIp:
    Value: !GetAtt ElasticInstance.PrivateIp
  KIbanaPrivateIp:
    Value: !GetAtt KibanaInstance.PrivateIp
  MongoPrivateIp:
    Value: !GetAtt MongoInstance.PrivateIp
  BastionPublicIp:
    Value: !GetAtt BastionInstance.PublicIp